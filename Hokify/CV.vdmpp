class CV
types
								 
											 
		public education = <HighSchool> | <FineSecondarySchool> | <Teaching> | <MandatorySchool> | <UniversityCollege> ;
		
		public drivingLicense = <A> | <B> | <C> | <D>;
	
		
		
		
values
-- TODO Define values here
instance variables
	firstName :  seq of char;
	lastName : seq of char;
	email: seq of char;
	hobbies : set of seq of char ;
	skills : set of seq of char;
	workExperience:	set of PastJob := {};
	
		
operations

			public CV: seq of char * seq of char * seq of char  ==> CV
				CV(fName,lName,e) == (
					workExperience := {};
					skills := {};
					hobbies := {};
					firstName := fName;
					lastName := lName;
					email := e;
			);		
			

			pure public getHobbies: () ==> set of seq of char
				getHobbies()  ==
				return hobbies;
				
			pure public getSkills: () ==> set of seq of char
				getSkills()  ==
				return skills;				

			pure public getWorkExperience: () ==> set of Job
				getWorkExperience()  ==
				return workExperience;	
	
	
			public addPastJob : PastJob ==> ()
				addPastJob(j) == 
				workExperience := workExperience union {j}
					pre j not in set workExperience
    			post j in set workExperience;
				
 			public removePastJob : PastJob ==> ()
				removePastJob(j) == 
				workExperience := workExperience \ {j}
					pre j  in set workExperience
    			post j not in set workExperience;
    
    			
 			public addHobbie : seq of char ==> ()
				addHobbie(h) == 
				hobbies := hobbies union {h}
					pre h not in set hobbies
    			post h in set hobbies;
				
 			public removeHobbie : seq of char ==> ()
				removeHobbie(h) == 
				hobbies := hobbies \ {h}
					pre h  in set hobbies
    			post h not in set hobbies;
    			   	

 			public addSkill : seq of char ==> ()
				addSkill(s) == 
				skills := skills union {s}
					pre s not in set skills
    			post s in set skills;
				
 			public removeSkill : seq of char ==> ()
				removeSkill(s) == 
				skills := skills \ {s}
					pre s  in set skills
    			post s not in set skills;
    			
    							
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end CV