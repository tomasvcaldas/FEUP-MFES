class CV
types
		public Hobbies = <IndividualSports> | <TeamSports> | <Music> | <Traveling> |
											 <Socializing> | <Painting> | <Dancing> | <Reading> |
											 <Writing> | <Computer> | <Animals> | <Mentoring> |
											 <Puzzles> | <Photography> | <Cinema> | <Politics> |
											 <Religion> | <Food> | <Volunteering> | <Cooking>;
											 
		public Skills =	 	 <DataAnalysis> | <Copywriting> | <ForeignLanguages> | <Accounting> |
											 <Programming> | <Mathematics> | <GraphicDesign> | <EventPlanning> |
											 <Marketing> | <Bookkeeping> | <Communication> | <DecisionMaking> |
											 <Leadership> | <Adaptability> | <Teamwork> | <Creativity> |
											 <SelfMotivation> | <QuickLearner> | <Responsible> | <Flexible>;									 
											 
		public education = <HighSchool> | <FineSecondarySchool> | <Teaching> | <MandatorySchool> | <UniversityCollege> | <Other>;
		
		public drivingLicense = <A> | <B> | <C> | <D>;
		
		public languages = <Portuguese> | <German> | <English> | <French> | <Italian> | <Polish> | <Spanish> | <Russian>;
		
		
		
values
-- TODO Define values here
instance variables
	hobbies : set of Hobbies := {};
	skills : set of Skills := {};
	workExperience:	set of Job := {};
	
		
operations
	public CV(h: set of Hobbies,s: set of Skills) res: CV == (
		hobbies := h;
		skills := s;
	
	)
	post res.hobbies = hobbies and res.skills = skills;

			pure public getHobbies: () ==> set of Hobbies
				getHobbies()  ==
				return hobbies;
				
			pure public getSkills: () ==> set of Skills
				getSkills()  ==
				return skills;				

			pure public getWorkExperience: () ==> set of Job
				getWorkExperience()  ==
				return workExperience;	
	
	
			public addJob : Job ==> ()
				addJob(j) == 
				workExperience := workExperience union {j}
					pre j not in set workExperience
    			post j in set workExperience;
				
 			public removeJob : Job ==> ()
				removeJob(j) == 
				workExperience := workExperience \ {j}
					pre j  in set workExperience
    			post j not in set workExperience;
    
    			
 			public addHobbies : Hobbies ==> ()
				addHobbies(h) == 
				hobbies := hobbies union {h}
					pre h not in set hobbies
    			post h in set hobbies;
				
 			public removeHobbies : Hobbies ==> ()
				removeHobbies(h) == 
				hobbies := hobbies \ {h}
					pre h  in set hobbies
    			post h not in set hobbies;
    			   	

 			public addSkill : Skills ==> ()
				addSkill(s) == 
				skills := skills union {s}
					pre s not in set skills
    			post s in set skills;
				
 			public removeSkill : Skills ==> ()
				removeSkill(s) == 
				skills := skills \ {s}
					pre s  in set skills
    			post s not in set skills;
    			
    							

    	

    	
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end CV