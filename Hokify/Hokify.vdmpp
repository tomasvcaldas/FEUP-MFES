class Hokify
types
-- TODO Define types here
values

	
instance variables
		users: set of User := {};
		jobOffers: set of JobOffer := {};
operations
	
	
 	pure public getUsers: () ==> set of User
		getUsers() ==
 		return users;
		
	pure public getJobOffers: () ==> set of JobOffer
		getJobOffers()  ==
		return jobOffers;
		
	public getMatchingOffersForUser: User  ==> set of JobOffer
		getMatchingOffersForUser(u) ==
		return u.getMatchingOffers(jobOffers)
			pre exists user in set users & User`areEqual(user, u);
			
	public getMatchingUsersForOffer: JobOffer  ==> set of User
		getMatchingUsersForOffer(job) ==
		return job.getMatchingOffers(users)
			pre exists j in set jobOffers & JobOffer`areEqual(j, job);
    			
 	public addUser :User ==> ()
		addUser(u) == 
		users := users union {u}
			pre not exists user in set users & User`areEqual(user, u)
  		post u in set users;
				
				
	public removeUser : User ==> ()
		removeUser(u) ==
		(
			for all user in set users do
				if User`areEqual(user, u) 
				then users := users \ {user};
		)
			pre exists user in set users & User`areEqual(user, u)
    	post not exists user in set users & User`areEqual(user, u);

 	public addJobOffer :JobOffer==> ()
		addJobOffer(j) == 
		jobOffers := jobOffers union {j}
			pre not exists job in set jobOffers & JobOffer`areEqual(job, j)
  		post j in set jobOffers;
				
				
	public removeJobOffer: JobOffer ==> ()
		removeJobOffer(j) ==
		(
			for all job in set jobOffers do
				if JobOffer`areEqual(job, j) 
				then jobOffers := jobOffers \ {job};
		)
			pre exists job in set jobOffers & JobOffer`areEqual(job, j)
    	post not exists job in set jobOffers & JobOffer`areEqual(job, j);
    	
   public addAppliance : User * JobOffer ==> ()
   addAppliance(u, j) ==
   		u.applyForJob(j);
   
   public acceptAppliance : User * JobOffer ==> ()
   acceptAppliance(u, j) ==
   		j.acceptAppliance(u);
   		
   public declineAppliance : User * JobOffer ==> ()
   declineAppliance(u, j) ==
   		j.declineAppliance(u);
    	
end Hokify