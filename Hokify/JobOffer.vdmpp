class JobOffer is subclass of Job
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	
	openPositions: nat;
	appliances: set of User;
	neededSkills: set of seq of char;
	requiredEducation: set of CV`Education;
	requiredDriversLicense: [CV`DriversLicense];
	
operations
--Job Offer constructor, initializes the variables
public JobOffer : seq of char * seq of char * nat * set of seq of char * set of CV`Education * [CV`DriversLicense] ==> JobOffer
JobOffer(c, p, openPos, skills, reqEdu, reqLicense) == (
        openPositions := openPos;
        appliances := {};
        neededSkills := skills;
        requiredEducation := reqEdu;
        requiredDriversLicense := reqLicense;
        Job(c, p);
);
--Returns the number of open positions
pure public getOpenPositions: () ==> nat
        getOpenPositions()  ==
        return openPositions;
--Returns all the appliances for the job        
pure public getAppliances: () ==> set of User
        getAppliances()  ==
        return appliances;
--Returns the needed skills for the job        
pure public getNeededSkills: () ==> set of seq of char
        getNeededSkills()  ==
        return neededSkills;
--Returns the needed education for the job        
pure public getRequiredEducation: () ==> set of CV`Education
        getRequiredEducation()  ==
        return requiredEducation;
--Returns the needed drivers license for the job    
pure public getRequiredDriversLicense: () ==> [CV`DriversLicense]
        getRequiredDriversLicense()  ==
        return requiredDriversLicense;
--Adds an user to the users that applied for that job        
public addAppliance : User ==> ()
        addAppliance(user) ==
        appliances := appliances union {user}
        pre user not in set appliances
        post user in set appliances;
--Removes an user from the users that applied for the job        
public removeAppliance : User ==> ()
        removeAppliance(user) ==
        appliances := appliances \ {user}
        pre user in set appliances
        post user not in set appliances;
--Returns the valid candidates for a job offer
public getMatchingOffers: set of User ==> set of User 
getMatchingOffers(users) ==
				(dcl validCandidates : set of User := {};
				for all user in set users do
					if neededSkills = {} or 
					(user.getCV() <> nil and card (user.getCV().getSkills() inter neededSkills) / card neededSkills > 0.5)
					then validCandidates := validCandidates union {user};
				return validCandidates
				);
--Accepts an user appliance for an offer
public acceptAppliance : User ==> ()
acceptAppliance(u) == 
(
		removeAppliance(u);
		openPositions := openPositions - 1;
		u.acceptedJob(self);
);
--Declines an user appliance for an offer
public declineAppliance : User ==> ()
declineAppliance(u) == 
(
		removeAppliance(u);
		u.declinedJob(self)
);


functions
--Verifies if two job offers are equal
public equals : JobOffer * JobOffer -> bool
equals(j1, j2) ==
		j1.company = j2.company and j1.position = j2.position and
		j1.neededSkills = j2.neededSkills and j1.requiredEducation = j2.requiredEducation and
		j1.requiredDriversLicense = j2.requiredDriversLicense;

end JobOffer