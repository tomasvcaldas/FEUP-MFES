class User
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
		firstName: seq of char;
		lastName: seq of char;
		email: seq of char;
		phonenumber: nat;
		curriculumVitae : CV;
		jobOffer: set of JobOffer := {};
	
		
operations

public User: seq of char * seq of char * seq of char * nat  ==> User
User(fName,lName,e,p) == (
				firstName := fName;
				lastName := lName;
				email := e;
				phonenumber := p;	
);

			public createCV : () ==> ()
				createCV() ==
				curriculumVitae := new CV(firstName, lastName,email);
				
		
			
			public getMatchingOffers: set of JobOffer ==> set of JobOffer 
				getMatchingOffers(offers) ==
				(dcl validJobs : set of JobOffer := {};
				for all offer in set offers do
					if card (curriculumVitae.getSkills() inter offer.getNeededSkills()) / card offer.getNeededSkills() > 0.5
					then validJobs := validJobs union {offer};
				return validJobs
				);
					

			pure public getFirstName: () ==> seq of char
				getFirstName() ==
 				 return firstName;
		
			pure public getLastName: () ==> seq of char
				getLastName()  ==
				return lastName;
				
			pure public getEmail: () ==> seq of char
				getEmail()  ==
				return email;
				
			pure public getPhoneNumber: () ==> nat
				getPhoneNumber()  ==
				return phonenumber;
										
			pure public getCV: () ==> CV
				getCV()  ==
				return curriculumVitae;
	

				
			public addJob : Job ==> ()
				addJob(j) == 
				curriculumVitae.addJob(j);
				
			public removeJob : Job ==> ()
				removeJob(j) ==
				curriculumVitae.removeJob(j);

			public addSkill : seq of char ==> ()
				addSkill(s) == 
				curriculumVitae.addSkill(s);
				
			public removeSkill : seq of char ==> ()
				removeSkill(s) ==
				curriculumVitae.removeSkill(s);		

			public addHobbie : seq of char ==> ()
				addHobbie(h) == 
				curriculumVitae.addHobbie(h);
				
			public removeHobbie : seq of char ==> ()
				removeHobbie(h) ==
				curriculumVitae.removeHobbie(h);		
				
						
functions



traces
-- TODO Define Combinatorial Test Traces here
end User