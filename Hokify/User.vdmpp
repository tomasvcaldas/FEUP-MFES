class User
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
		firstName: seq of char;
		lastName: seq of char;
		email: seq of char;
		phonenumber: seq of nat;
		curriculumVitae : CV;
		
operations

public User: seq of char * seq of char * seq of char * seq of nat  ==> User
User(fName,lName,e,p) == (
				firstName := fName;
				lastName := lName;
				email := e;
				phonenumber := p;
				
)
		post firstName = fName and lastName = lName and email = e and phonenumber = p and curriculumVitae = undefined;

			
			pure public getFirstName: () ==> seq of char
				getFirstName() ==
 				 return firstName;
		
			pure public getLastName: () ==> seq of char
				getLastName()  ==
				return lastName;
				
			pure public getEmail: () ==> seq of char
				getEmail()  ==
				return email;
				
			pure public getPhoneNumber: () ==> seq of nat
				getPhoneNumber()  ==
				return phonenumber;
										
			pure public getCV: () ==> CV
				getCV()  ==
				return curriculumVitae;

			public addJob : Job ==> ()
				addJob(j) == 
				curriculumVitae.addJob(j);
				
			public removeJob : Job ==> ()
				removeJob(j) ==
				curriculumVitae.removeJob(j);

			public addSkill : seq of char ==> ()
				addSkill(s) == 
				curriculumVitae.addSkill(s);
				
			public removeSkill : seq of char ==> ()
				removeSkill(s) ==
				curriculumVitae.removeSkill(s);		

			public addHobbies : seq of char ==> ()
				addHobbies(h) == 
				curriculumVitae.addHobbies(h);
				
			public removeHobbies : seq of char ==> ()
				removeHobbies(h) ==
				curriculumVitae.removeHobbies(h);					
functions



traces
-- TODO Define Combinatorial Test Traces here
end User