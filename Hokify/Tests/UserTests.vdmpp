class UserTests
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
operations
		protected assert : bool ==> ()
			assert(a) == return 
			pre a;
	
  
	
		private testUserParams: () ==> ()
			testUserParams() ==
			(
				dcl u : User := new User("Tomas","Caldas","tomasvcaldas@gmail.com",925302024);
				assert(u.getFirstName() = "Tomas");
				assert(u.getLastName() = "Caldas");
				assert(u.getEmail() = "tomasvcaldas@gmail.com");
				assert(u.getPhoneNumber() = 925302024);
				
			);
			
		private testUserCV: () ==> ()
			testUserCV() ==
			(
				dcl u : User := new User("Tomas","Caldas","tomasvcaldas@gmail.com",925302024);
				dcl pastJob : PastJob := new PastJob("Google","CEO", mk_Job`Date(2007, 03, 12), mk_Job`Date(2007, 09, 12));
				
				u.createCV();
				assert(card(u.getCV().getHobbies()) = 0);
				assert(card(u.getCV().getSkills()) = 0);
				assert(card(u.getCV().getWorkExperience()) = 0);
				
				assert(pastJob.getCompany() = "Google");
				assert(pastJob.getPosition() = "CEO");
				assert(pastJob.getStartDate() = mk_Job`Date(2007, 03, 12));
				assert(pastJob.getEndDate() =  mk_Job`Date(2007, 09, 12));
				u.addPastJob(pastJob);
				assert(pastJob in set u.getCV().getWorkExperience());
				u.removePastJob(pastJob);
				assert(pastJob not in set u.getCV().getWorkExperience());
				
				u.addHobbie("Drawing");
				assert("Drawing" in set u.getCV().getHobbies());
				u.removeHobbie("Drawing");
				assert("Drawing" not in set u.getCV().getHobbies());
				
				u.addSkill("Java");
				assert("Java" in set u.getCV().getSkills());
				u.removeSkill("Java");
				assert("Java" not in set u.getCV().getSkills());				
			);
	
		

		
		
	public runTests: () ==> ()
		runTests() ==
		(
			testUserParams();
			testUserCV();
		);
			
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end UserTests