class HokifyTests is subclass of Tests
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	andre: User := new User("Andre", "Reis", "andre@gmail.com", 917777777);
	tomas : User := new User("Tomas", "Caldas", "tomas@gmail.com", 919999999);
	allEducations : set of CV`Education := {<HighSchool>, <FineSecondarySchool>, <Teaching>, <MandatorySchool>, <UniversityCollege>};
	googleOffer : JobOffer := new JobOffer("Google", "CTO", 1, {"Java"}, {}, <C>);
	facebookOffer : JobOffer := new JobOffer("Facebook", "CodeMonkey", 1, {"C"}, {<HighSchool>}, nil);
operations
-- TODO Define operations here
private testHokify : () ==> ()
testHokify() ==
(		--verifies if an empty hokify class has no users and no job offers
		dcl hokify : Hokify := new Hokify();
		
		assert(hokify.getUsers() = {});
		assert(hokify.getJobOffers() = {});
);

private testUsers : () ==> ()
testUsers() ==
(
		--creates an empty hokify class, adds and removes two users and checks if it was done correctly
		dcl hokify : Hokify := new Hokify();
		
		hokify.addUser(andre);
		assert(hokify.getUsers() = {andre});
		hokify.addUser(tomas);
		assert(hokify.getUsers() = {andre, tomas});
		hokify.removeUser(andre);
		assert(hokify.getUsers() = {tomas});
		hokify.removeUser(tomas);
		assert(hokify.getUsers() = {});
		
);

private testJobOffers : () ==> ()
testJobOffers() ==
(
		--creates an empty hokify class, adds and removes two job offers and checks if it was done correctly
		dcl hokify : Hokify := new Hokify();
		
		hokify.addJobOffer(googleOffer);
		assert(hokify.getJobOffers() = {googleOffer});
		hokify.addJobOffer(facebookOffer);
		assert(hokify.getJobOffers() = {facebookOffer, googleOffer});
		hokify.removeJobOffer(facebookOffer);
		assert(hokify.getJobOffers() = {googleOffer});
		hokify.removeJobOffer(googleOffer);
		assert(hokify.getJobOffers() = {});
		
);

private testMatching : () ==> ()
testMatching() ==
(
		--creates an empty hokify class, two users with driver license and education and checks the matching offers for those users while adding different skills and education.
		dcl hokify : Hokify := new Hokify();
		
		andre.createCV();
		tomas.createCV();
		andre.setDriversLicense(<C>);
		tomas.addEducation(<HighSchool>);
		hokify.addUser(andre);
		hokify.addUser(tomas);
		
		hokify.addJobOffer(googleOffer);
		hokify.addJobOffer(facebookOffer);
	
		assert(hokify.getMatchingOffersForUser(andre) = {});
		assert(hokify.getMatchingOffersForUser(tomas) = {});
		
		andre.addSkill("Java");
		assert(hokify.getMatchingOffersForUser(andre) = {googleOffer});
		assert(hokify.getMatchingUsersForOffer(googleOffer) = {andre});
		
		tomas.addSkill("C");
		assert(hokify.getMatchingOffersForUser(tomas) = {facebookOffer});
		assert(hokify.getMatchingUsersForOffer(facebookOffer) = {tomas});
		
		andre.addSkill("C");
		andre.addEducation(<HighSchool>);
		assert(hokify.getMatchingOffersForUser(andre) = {googleOffer, facebookOffer});
		assert(hokify.getMatchingUsersForOffer(facebookOffer) = {andre, tomas});
		
);

private testAppliance : () ==> ()
testAppliance() ==
(		--creates a new empty hokify class, makes appliances for a job offer, accepts one and declines the other
		dcl hokify : Hokify := new Hokify();
		dcl googleOpenPos : nat := googleOffer.getOpenPositions();

		assert(googleOffer.getAppliances() = {});
		
		hokify.addAppliance(andre, googleOffer);
		assert(googleOffer.getAppliances() = {andre});
		assert(andre.getAppliances() = {googleOffer});
		
		hokify.addAppliance(tomas, googleOffer);
		assert(googleOffer.getAppliances() = {andre, tomas});
		assert(tomas.getAppliances() = {googleOffer});
		
		hokify.acceptAppliance(andre, googleOffer);
		assert(googleOffer.getOpenPositions() = googleOpenPos - 1);
		assert(googleOffer.getAppliances() = {tomas});
		assert(andre.getAppliances() = {});
		assert(exists job in set andre.getCV().getWorkExperience() & 
			PastJob`equals(job, new PastJob(googleOffer.getCompany(), googleOffer.getPosition(), mk_Job`Date(2018, 01, 03), nil)));
		googleOpenPos := googleOffer.getOpenPositions();
		
		hokify.declineAppliance(tomas, googleOffer);
		assert(googleOffer.getOpenPositions() = googleOpenPos);
		assert(googleOffer.getAppliances() = {});
		assert(tomas.getAppliances() = {});
);
--runs the above tests
public runTests : () ==> ()
runTests() ==
(
		testHokify();
		testUsers();
		testJobOffers();
		testMatching();
		testAppliance();
);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end HokifyTests